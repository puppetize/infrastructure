#! /bin/sh
### BEGIN INIT INFO
# Provides:          iptables
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Manage DNAT/SNAT chains and other static rules
# Description:       This script manages the binat-dnat and binat-snat
#                    chains of iptables and other static rules.
### END INIT INFO

# Author: Uwe Stuehler <uwe@bsdx.de>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="iptables"
NAME=iptables
IPTABLES_BINAT=/usr/local/sbin/iptables-binat
IPTABLES_RULES=/usr/local/sbin/iptables-rules
BINAT_CONFIG=/etc/binat.conf.yaml
RULES_CONFIG=/etc/iptables.conf
SCRIPTNAME=/etc/init.d/$NAME

# Exit if neither program is installed
[ -x "$IPTABLES_BINAT" -o -x "$IPTABLES_RULES" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
        status=0
        if [ -r "$BINAT_CONFIG" ]; then
                $IPTABLES_BINAT >/dev/null || status=2
        fi
        if [ -r "$RULES_CONFIG" ]; then
                $IPTABLES_RULES load >/dev/null || status=2
        fi
        return $status
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
        status=0
        iptables-save -t nat | egrep -v '[: ]binat-[ds]nat( .*|)$' | iptables-restore || status=2
        if [ -r "$RULES_CONFIG" ]; then
                $IPTABLES_RULES unload >/dev/null || status=2
        fi
	return $status
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
        do_start
	return $?
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
        status=0
        if [ -r "$BINAT_CONFIG" ]; then
                iptables-save -t nat | egrep -q '[: ]binat-[ds]nat( .*|)$' || status=1
        fi
        if [ -r "$RULES_CONFIG" ]; then
                $IPTABLES_RULES status >/dev/null || status=1
        fi
        if [ $status -eq 0 ]; then
           log_success_msg "$NAME is running"
           exit 0
        else
           log_failure_msg "$NAME is not running"
           exit 1
        fi
        ;;
  reload|force-reload)
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
  restart)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	exit 3
	;;
esac

:
